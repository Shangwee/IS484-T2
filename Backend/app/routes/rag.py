"""
RAG (Retrieval-Augmented Generation) routes

This module provides API endpoints for the RAG system, including:
- Query processing with document retrieval and answer generation
- Integration with sentiment analysis for context evaluation
"""

from flask import Blueprint, jsonify, request
from app.services.rag_services import process_rag_query
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Create blueprint
rag_bp = Blueprint('rag', __name__)

@rag_bp.route('/query', methods=['POST'])
def rag_query():
    """
    Process a RAG query with document retrieval and answer generation
    
    Request JSON:
    {
        "query": "String with user's question",
        "clientProfile": "conservative|moderate|aggressive", // Optional: client risk profile
        "entityFocus": "String with entity name", // Optional: entity to focus on
        "timeRange": "day|week|month|year" // Optional: time range for context
    }
    
    Response JSON:
    {
        "answer": "Generated answer based on retrieved context",
        "summary": "1-2 sentence summary of the answer",
        "sources": [
            {
                "id": "document_id",
                "title": "Document title",
                "source": "Source name",
                "date": "Publication date",
                "time": "Time ago (e.g. '2 hours ago')",
                "url": "URL if available"
            }
        ],
        "entities": {
            "org": ["Organization1", "Organization2"],
            "person": ["Person1", "Person2"]
        },
        "entity_sentiment": {
            "Organization1": {
                "score": 42.5,
                "classification": "bullish",
                "snapshot_type": "context",
                "disclaimer": "..."
            }
        },
        "context_sentiment": {
            "score": 42.5,
            "classification": "bullish",
            "confidence": 0.85,
            "agreement_rate": 0.9
        },
        "follow_up_questions": [
            "Related follow-up question 1?",
            "Related follow-up question 2?"
        ]
    }
    """
    try:
        # Start timing for performance tracking
        import time
        start_time = time.time()
        
        # Get request data
        data = request.get_json()
        
        if not data or 'query' not in data:
            return jsonify({
                'error': 'Missing query in request'
            }), 400
        
        # Extract all parameters
        query = data['query']
        client_profile = data.get('clientProfile', 'moderate')
        entity_focus = data.get('entityFocus')
        time_range = data.get('timeRange', 'week')
        top_k = data.get('top_k', 5)  # Default to 5 documents
        
        # Log request for analytics
        logger.info(f"RAG Query - Query: '{query}', Profile: {client_profile}, " + 
                    f"Entity Focus: {entity_focus}, Time Range: {time_range}")
        
        # Process the query with all parameters
        result = process_rag_query(
            query, 
            top_k=top_k,
            client_profile=client_profile,
            entity_focus=entity_focus,
            time_range=time_range
        )
        
        # Add processing time for monitoring
        processing_time = time.time() - start_time
        result['processing_time'] = processing_time
        
        # Add follow-up questions placeholder (would be generated by the service)
        if 'follow_up_questions' not in result:
            result['follow_up_questions'] = [
                "How does this impact my portfolio allocation?",
                "What are the biggest risks to watch?",
                "How does this compare to historical trends?"
            ]
            
        # Add telemetry
        logger.info(f"RAG Query completed in {processing_time:.2f}s - " + 
                   f"Sources: {len(result.get('sources', []))}, " +
                   f"Entities: {len(result.get('entities', {}).get('org', []) + result.get('entities', {}).get('person', []))}")
                   
        # Return the result
        return jsonify(result), 200
        
    except Exception as e:
        logger.error(f"Error processing RAG query: {e}")
        return jsonify({
            'error': 'Internal server error',
            'message': str(e)
        }), 500